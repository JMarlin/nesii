ca65 V2.18 - N/A
Main file   : bios.asm
Current file: bios.asm

000000r 1               .SEGMENT "CODE_MAIN"
000000r 1               .INCLUDE "char_io.inc"
000000r 2               SCREEN_ADDR = $00
000000r 2               STRING_PTR = $03
000000r 2               IS_SCROLLING = $05
000000r 2               SCROLL_VALUE = $06
000000r 2               CURRENT_KB_COL = $07
000000r 2               CURRENT_KB_ROW = $08
000000r 2               KEY_WAS_FOUND = $09
000000r 2               LAST_KB_BIT = $0A
000000r 2               LAST_PRESSED_KEY = $0B
000000r 2               
000000r 2               
000000r 1               .INCLUDE "monitor.inc"
000000r 2               ; cmon zero page usage
000000r 2               ADRESS = $0D
000000r 2               NUMBER = $0F
000000r 2               
000000r 2               
000000r 1               
000000r 1               ENTRY:
000000r 1               ;Turn off interrupts and decimal mode
000000r 1  78               SEI
000001r 1  D8               CLD
000002r 1  A2 FF            LDX #$FF
000004r 1  9A               TXS
000005r 1               
000005r 1               ;Initialize PPU state (disable interrupts and rendering)
000005r 1  A9 00            LDA #$00
000007r 1  8D 00 20         STA $2000
00000Ar 1  8D 01 20         STA $2001
00000Dr 1               
00000Dr 1               ;Wait for three vblanks (let PPU state settle?)
00000Dr 1  2C 02 20         BIT $2002
000010r 1               ppu_vblank_wait1:
000010r 1  2C 02 20         BIT $2002
000013r 1  10 FB            BPL ppu_vblank_wait1
000015r 1               
000015r 1  2C 02 20         BIT $2002
000018r 1               ppu_vblank_wait2:
000018r 1  2C 02 20         BIT $2002
00001Br 1  10 FB            BPL ppu_vblank_wait2
00001Dr 1               
00001Dr 1  2C 02 20         BIT $2002
000020r 1               ppu_vblank_wait3:
000020r 1  2C 02 20         BIT $2002
000023r 1  10 FB            BPL ppu_vblank_wait3
000025r 1               
000025r 1               ;Wait for a vblank
000025r 1               :
000025r 1  2C 02 20         BIT $2002
000028r 1  10 FB            BPL :-
00002Ar 1               
00002Ar 1               ;Set background palette values
00002Ar 1               ;Universal background = black
00002Ar 1  A9 3F            LDA #$3F
00002Cr 1  8D 06 20         STA $2006
00002Fr 1  A9 00            LDA #$00
000031r 1  8D 06 20         STA $2006
000034r 1  A9 20            LDA #$20
000036r 1  8D 07 20         STA $2007
000039r 1               
000039r 1  A9 3F            LDA #$3F
00003Br 1  8D 06 20         STA $2006
00003Er 1  A9 01            LDA #$01
000040r 1  8D 06 20         STA $2006
000043r 1  A9 20            LDA #$20
000045r 1  8D 07 20         STA $2007
000048r 1               
000048r 1  A9 3F            LDA #$3F
00004Ar 1  8D 06 20         STA $2006
00004Dr 1  A9 02            LDA #$02
00004Fr 1  8D 06 20         STA $2006
000052r 1  A9 1D            LDA #$1D
000054r 1  8D 07 20         STA $2007
000057r 1               
000057r 1  A9 3F            LDA #$3F
000059r 1  8D 06 20         STA $2006
00005Cr 1  A9 03            LDA #$03
00005Er 1  8D 06 20         STA $2006
000061r 1  A9 1D            LDA #$1D
000063r 1  8D 07 20         STA $2007
000066r 1               
000066r 1               ;Fill first attribute table to all be palette zero
000066r 1  A2 40            LDX #64
000068r 1               WRITE_ATTR_TOP:
000068r 1  A9 23            LDA #$23
00006Ar 1  8D 06 20         STA $2006
00006Dr 1  8A               TXA
00006Er 1  18               CLC
00006Fr 1  69 BF            ADC #$BF
000071r 1  8D 06 20         STA $2006
000074r 1  A9 00            LDA #$00
000076r 1  8D 07 20         STA $2007
000079r 1  CA               DEX
00007Ar 1  D0 EC            BNE WRITE_ATTR_TOP
00007Cr 1               
00007Cr 1               ;Wait for VBLANK
00007Cr 1               :
00007Cr 1  2C 02 20         BIT $2002
00007Fr 1  10 FB            BPL :-
000081r 1               
000081r 1               ;Fill the screen with blank tiles
000081r 1  A9 20            LDA #$20
000083r 1  8D 06 20         STA $2006
000086r 1  A9 00            LDA #$00
000088r 1  8D 06 20         STA $2006
00008Br 1  A2 3C            LDX #$3C
00008Dr 1  A9 7E            LDA #$7E
00008Fr 1               :
00008Fr 1  8D 07 20         STA $2007
000092r 1  8D 07 20         STA $2007
000095r 1  8D 07 20         STA $2007
000098r 1  8D 07 20         STA $2007
00009Br 1  8D 07 20         STA $2007
00009Er 1  8D 07 20         STA $2007
0000A1r 1  8D 07 20         STA $2007
0000A4r 1  8D 07 20         STA $2007
0000A7r 1  8D 07 20         STA $2007
0000AAr 1  8D 07 20         STA $2007
0000ADr 1  8D 07 20         STA $2007
0000B0r 1  8D 07 20         STA $2007
0000B3r 1  8D 07 20         STA $2007
0000B6r 1  8D 07 20         STA $2007
0000B9r 1  8D 07 20         STA $2007
0000BCr 1  8D 07 20         STA $2007
0000BFr 1  CA               DEX
0000C0r 1  D0 CD            BNE :-
0000C2r 1               
0000C2r 1               ;Set scroll to 0, 0
0000C2r 1  A9 00            LDA #$00
0000C4r 1  8D 05 20         STA $2005
0000C7r 1  8D 05 20         STA $2005
0000CAr 1  85 06            STA SCROLL_VALUE
0000CCr 1               
0000CCr 1               ;Initialize print location to 1,1 on the playfield
0000CCr 1  A9 21            LDA #$21
0000CEr 1  85 00            STA SCREEN_ADDR
0000D0r 1  A9 20            LDA #$20
0000D2r 1  85 01            STA SCREEN_ADDR+1
0000D4r 1               
0000D4r 1               ;When we first start, we do not yet need to scroll
0000D4r 1  A9 00            LDA #$00
0000D6r 1  85 05            STA IS_SCROLLING
0000D8r 1               
0000D8r 1               ;Indicate that we haven't yet clocked in any bits from the keyboard
0000D8r 1  A9 FF            LDA #$FF
0000DAr 1  85 0A            STA LAST_KB_BIT
0000DCr 1  A9 00            LDA #$00
0000DEr 1  85 07            STA CURRENT_KB_COL
0000E0r 1  85 08            STA CURRENT_KB_ROW
0000E2r 1               
0000E2r 1               ;Enable rendering
0000E2r 1  A9 0E            LDA #$0E
0000E4r 1  8D 01 20         STA $2001
0000E7r 1               
0000E7r 1  4C rr rr     JMP HALT
0000EAr 1               
0000EAr 1               ; bit 0 low and bit 1 low (in) = read next half-nybble from bits 2 and 3 (in)
0000EAr 1               ; bit 0 low and bit 1 high (in) = load next half-nybble into bits 2 and 3 (out)
0000EAr 1               ; bit 0 high (out) = incoming data is available in bits 2 and 3 (out)
0000EAr 1               .GLOBAL PICO_TX
0000EAr 1               PICO_TX:
0000EAr 1  A0 04            LDY #$04
0000ECr 1               NEXT_TX_BIT:
0000ECr 1  AA               TAX
0000EDr 1  29 03            AND #$03
0000EFr 1  6A               ROR
0000F0r 1  90 03            BCC NO_TX_ADD
0000F2r 1  18               CLC
0000F3r 1  69 02            ADC #$02
0000F5r 1               NO_TX_ADD:
0000F5r 1  48               PHA
0000F6r 1               WAIT_TX_READY:
0000F6r 1  AD 00 80         LDA $8000
0000F9r 1  29 04            AND #$04
0000FBr 1  F0 F9            BEQ WAIT_TX_READY
0000FDr 1  68               PLA
0000FEr 1  8D 00 80         STA $8000
000101r 1  8A               TXA
000102r 1  4A               LSR
000103r 1  4A               LSR
000104r 1  88               DEY
000105r 1  D0 E5            BNE NEXT_TX_BIT
000107r 1               
000107r 1  60               RTS
000108r 1               
000108r 1               ;TODO: figure out how to tell pico that we want more data
000108r 1               .GLOBAL PICO_RX
000108r 1               PICO_RX:
000108r 1  A2 00            LDX #$00
00010Ar 1  A0 04            LDY #$04
00010Cr 1               NEXT_RX_BIT:
00010Cr 1  AD 00 80         LDA $8000
00010Fr 1  29 08            AND #$08
000111r 1  F0 F9            BEQ NEXT_RX_BIT
000113r 1  AD 00 80         LDA $8000
000116r 1  29 03            AND #$03
000118r 1  6A               ROR
000119r 1  90 03            BCC NO_RX_ADD
00011Br 1  18               CLC
00011Cr 1  69 02            ADC #$02
00011Er 1               NO_RX_ADD:
00011Er 1  85 00            STA $00
000120r 1  8A               TXA
000121r 1  0A               ASL
000122r 1  0A               ASL
000123r 1  65 00            ADC $00
000125r 1  AA               TAX
000126r 1  A9 04            LDA #$04
000128r 1  8D 00 80         STA $8000
00012Br 1  88               DEY
00012Cr 1  D0 DE            BNE NEXT_RX_BIT
00012Er 1               
00012Er 1  8A               TXA
00012Fr 1  60               RTS
000130r 1               
000130r 1               .GLOBAL init
000130r 1               HALT:
000130r 1  4C rr rr         JMP init
000133r 1  4C rr rr         JMP HALT
000136r 1               
000136r 1               IRQ_BRK_HANDLE:
000136r 1  40               RTI
000137r 1               
000137r 1               .SEGMENT "KEY_LUT"
000000r 1               KEY_LUT:
000000r 1  3B           .BYTE ';'
000001r 1  4C           .BYTE 'L'
000002r 1  4B           .BYTE 'K'
000003r 1  4A           .BYTE 'J'
000004r 1  48           .BYTE 'H'
000005r 1  20           .BYTE $20
000006r 1  50           .BYTE 'P'
000007r 1  4F           .BYTE 'O'
000008r 1  49           .BYTE 'I'
000009r 1  55           .BYTE 'U'
00000Ar 1  59           .BYTE 'Y'
00000Br 1  0D           .BYTE $0D
00000Cr 1  30           .BYTE '0'
00000Dr 1  39           .BYTE '9'
00000Er 1  38           .BYTE '8'
00000Fr 1  37           .BYTE '7'
000010r 1  36           .BYTE '6'
000011r 1  00           .BYTE $00
000012r 1  5A           .BYTE 'Z'
000013r 1  58           .BYTE 'X'
000014r 1  43           .BYTE 'C'
000015r 1  56           .BYTE 'V'
000016r 1  42           .BYTE 'B'
000017r 1  00           .BYTE $00
000018r 1  41           .BYTE 'A'
000019r 1  53           .BYTE 'S'
00001Ar 1  44           .BYTE 'D'
00001Br 1  46           .BYTE 'F'
00001Cr 1  47           .BYTE 'G'
00001Dr 1  00           .BYTE $00
00001Er 1  51           .BYTE 'Q'
00001Fr 1  57           .BYTE 'W'
000020r 1  45           .BYTE 'E'
000021r 1  52           .BYTE 'R'
000022r 1  54           .BYTE 'T'
000023r 1  00           .BYTE $00
000024r 1  31           .BYTE '1'
000025r 1  32           .BYTE '2'
000026r 1  33           .BYTE '3'
000027r 1  34           .BYTE '4'
000028r 1  35           .BYTE '5'
000029r 1  00           .BYTE $00
00002Ar 1  2F           .BYTE '/'
00002Br 1  3E           .BYTE '>'
00002Cr 1  3C           .BYTE '<'
00002Dr 1  4D           .BYTE 'M'
00002Er 1  4E           .BYTE 'N'
00002Fr 1  2B           .BYTE '+'
000030r 1               
000030r 1               .SEGMENT "CHR_LUT"
000000r 1               CHR_LUT:
000000r 1  00           .BYTE $00 ; 0x0
000001r 1  00           .BYTE $00 ; 0x1
000002r 1  00           .BYTE $00 ; 0x2
000003r 1  00           .BYTE $00 ; 0x3
000004r 1  00           .BYTE $00 ; 0x4
000005r 1  00           .BYTE $00 ; 0x5
000006r 1  00           .BYTE $00 ; 0x6
000007r 1  00           .BYTE $00 ; 0x7
000008r 1  00           .BYTE $00 ; 0x8
000009r 1  00           .BYTE $00 ; 0x9
00000Ar 1  00           .BYTE $00 ; 0xa
00000Br 1  00           .BYTE $00 ; 0xb
00000Cr 1  00           .BYTE $00 ; 0xc
00000Dr 1  00           .BYTE $00 ; 0xd
00000Er 1  00           .BYTE $00 ; 0xe
00000Fr 1  00           .BYTE $00 ; 0xf
000010r 1  00           .BYTE $00 ; 0x10
000011r 1  00           .BYTE $00 ; 0x11
000012r 1  00           .BYTE $00 ; 0x12
000013r 1  00           .BYTE $00 ; 0x13
000014r 1  00           .BYTE $00 ; 0x14
000015r 1  00           .BYTE $00 ; 0x15
000016r 1  00           .BYTE $00 ; 0x16
000017r 1  00           .BYTE $00 ; 0x17
000018r 1  00           .BYTE $00 ; 0x18
000019r 1  00           .BYTE $00 ; 0x19
00001Ar 1  00           .BYTE $00 ; 0x1a
00001Br 1  00           .BYTE $00 ; 0x1b
00001Cr 1  00           .BYTE $00 ; 0x1c
00001Dr 1  00           .BYTE $00 ; 0x1d
00001Er 1  00           .BYTE $00 ; 0x1e
00001Fr 1  00           .BYTE $00 ; 0x1f
000020r 1  7D           .BYTE $7D ; 0x20
000021r 1  6A           .BYTE $6A ; 0x21
000022r 1  BD           .BYTE $BD ; 0x22
000023r 1  27           .BYTE $27 ; 0x23
000024r 1  6C           .BYTE $6C ; 0x24
000025r 1  E8           .BYTE $E8 ; 0x25
000026r 1  67           .BYTE $67 ; 0x26
000027r 1  2B           .BYTE $2B ; 0x27
000028r 1  64           .BYTE $64 ; 0x28
000029r 1  66           .BYTE $66 ; 0x29
00002Ar 1  7B           .BYTE $7B ; 0x2a
00002Br 1  8F           .BYTE $8F ; 0x2b
00002Cr 1  1A           .BYTE $1A ; 0x2c
00002Dr 1  65           .BYTE $65 ; 0x2d
00002Er 1  69           .BYTE $69 ; 0x2e
00002Fr 1  7A           .BYTE $7A ; 0x2f
000030r 1  70           .BYTE $70 ; 0x30
000031r 1  71           .BYTE $71 ; 0x31
000032r 1  72           .BYTE $72 ; 0x32
000033r 1  73           .BYTE $73 ; 0x33
000034r 1  74           .BYTE $74 ; 0x34
000035r 1  75           .BYTE $75 ; 0x35
000036r 1  76           .BYTE $76 ; 0x36
000037r 1  77           .BYTE $77 ; 0x37
000038r 1  78           .BYTE $78 ; 0x38
000039r 1  79           .BYTE $79 ; 0x39
00003Ar 1  F7           .BYTE $F7 ; 0x3a
00003Br 1  DC           .BYTE $DC ; 0x3b
00003Cr 1  2E           .BYTE $2E ; 0x3c
00003Dr 1  C7           .BYTE $C7 ; 0x3d
00003Er 1  2F           .BYTE $2F ; 0x3e
00003Fr 1  6B           .BYTE $6B ; 0x3f
000040r 1  6D           .BYTE $6D ; 0x40
000041r 1  30           .BYTE $30 ; 0x41
000042r 1  31           .BYTE $31 ; 0x42
000043r 1  32           .BYTE $32 ; 0x43
000044r 1  33           .BYTE $33 ; 0x44
000045r 1  34           .BYTE $34 ; 0x45
000046r 1  35           .BYTE $35 ; 0x46
000047r 1  36           .BYTE $36 ; 0x47
000048r 1  37           .BYTE $37 ; 0x48
000049r 1  38           .BYTE $38 ; 0x49
00004Ar 1  39           .BYTE $39 ; 0x4a
00004Br 1  3A           .BYTE $3A ; 0x4b
00004Cr 1  3B           .BYTE $3B ; 0x4c
00004Dr 1  3C           .BYTE $3C ; 0x4d
00004Er 1  3D           .BYTE $3D ; 0x4e
00004Fr 1  3E           .BYTE $3E ; 0x4f
000050r 1  3F           .BYTE $3F ; 0x50
000051r 1  40           .BYTE $40 ; 0x51
000052r 1  41           .BYTE $41 ; 0x52
000053r 1  42           .BYTE $42 ; 0x53
000054r 1  43           .BYTE $43 ; 0x54
000055r 1  44           .BYTE $44 ; 0x55
000056r 1  45           .BYTE $45 ; 0x56
000057r 1  46           .BYTE $46 ; 0x57
000058r 1  47           .BYTE $47 ; 0x58
000059r 1  48           .BYTE $48 ; 0x59
00005Ar 1  49           .BYTE $49 ; 0x5a
00005Br 1  98           .BYTE $98 ; 0x5b
00005Cr 1  E7           .BYTE $E7 ; 0x5c
00005Dr 1  9A           .BYTE $9A ; 0x5d
00005Er 1  6E           .BYTE $6E ; 0x5e
00005Fr 1  8C           .BYTE $8C ; 0x5f
000060r 1  81           .BYTE $81 ; 0x60
000061r 1  50           .BYTE $50 ; 0x61
000062r 1  51           .BYTE $51 ; 0x62
000063r 1  52           .BYTE $52 ; 0x63
000064r 1  53           .BYTE $53 ; 0x64
000065r 1  54           .BYTE $54 ; 0x65
000066r 1  55           .BYTE $55 ; 0x66
000067r 1  56           .BYTE $56 ; 0x67
000068r 1  57           .BYTE $57 ; 0x68
000069r 1  58           .BYTE $58 ; 0x69
00006Ar 1  59           .BYTE $59 ; 0x6a
00006Br 1  5A           .BYTE $5A ; 0x6b
00006Cr 1  5B           .BYTE $5B ; 0x6c
00006Dr 1  5C           .BYTE $5C ; 0x6d
00006Er 1  5D           .BYTE $5D ; 0x6e
00006Fr 1  5E           .BYTE $5E ; 0x6f
000070r 1  5F           .BYTE $5F ; 0x70
000071r 1  4A           .BYTE $4A ; 0x71
000072r 1  4B           .BYTE $4B ; 0x72
000073r 1  4C           .BYTE $4C ; 0x73
000074r 1  4D           .BYTE $4D ; 0x74
000075r 1  4E           .BYTE $4E ; 0x75
000076r 1  4F           .BYTE $4F ; 0x76
000077r 1  01           .BYTE $01 ; 0x77
000078r 1  08           .BYTE $08 ; 0x78
000079r 1  0C           .BYTE $0C ; 0x79
00007Ar 1  0F           .BYTE $0F ; 0x7a
00007Br 1  A0           .BYTE $A0 ; 0x7b
00007Cr 1  5B           .BYTE $5B ; 0x7c
00007Dr 1  A1           .BYTE $A1 ; 0x7d
00007Er 1  1C           .BYTE $1C ; 0x7e
00007Fr 1               
00007Fr 1               .SEGMENT "BLANK_AREA"
000000r 1  00 00 00 00  .REPEAT $C600
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
00C600r 1               .BYTE $00
00C600r 1               .ENDREP
00C600r 1               
00C600r 1               .SEGMENT "VECTORS"
000000r 1  00 00        .WORD $0000
000002r 1  rr rr        .WORD ENTRY
000004r 1  rr rr        .WORD IRQ_BRK_HANDLE
000006r 1               
000006r 1               
